# UDACITY PROJECT 3 - Utilize Deployment Strategies to Design and Build CI/CD Pipelines that Support Continuous Delivery Processes 

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      workflow_id:
#        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      workflow_id:
#          type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  curl https://kvdb.io/JpFWag6cMyoPuQ16GjNXxT/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  #BUILD
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # look for existing cache and restore if found
      - restore_cache:
          keys: [frontend-build]
      # install dependencies and run build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      # save any changes to the cache
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]
     # install dependencies and run build
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 
      # test frontend
      - run: 
          name: test frontend
          command: |
            cd frontend
            npm install
            npm test

  #TEST              
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build] 
      # test backend
      - run: 
          name: test backend
          command: |
            cd backend
            npm install
            npm test
  
  #find and fix vulnerabilities
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run: 
          name: Fix critical vulnerabilities
          command: |
            cd frontend
            npm install
            npm update
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
  
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run: 
          name: Fix critical vulnerabilities
          command: |
            cd backend
            npm install
            npm update
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
  
  #DEPLOY INFRASTUCTURE
  #install backend instances; create an S3 bucket; prometheus server
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      #installing tar - mandatory for creating workspaces in aws-cli image
      - run:
          name: Install dependencies 
          command: yum install -y tar gzip
      #install backend instance    
      - run:
          name: Create Backend infrastructure stack
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --no-fail-on-empty-changeset
       
      #install frontend resources
      - run:
          name: Create Frontend infrastructure stack
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --no-fail-on-empty-changeset
      
      #install prometheus server
      - run:
          name: Create Prometheus server stack
          working_directory: ./.circleci/files
          command: |
              aws cloudformation deploy \
                --template-file prometheus.yml \
                --tags project=udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
                --no-fail-on-empty-changeset
           
      #Add back-end ip/hostname to ansible inventory
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo [backend] > inventory.txt
            aws ec2 describe-instances \
             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --query "Reservations[*].Instances[*].PublicDnsName" \
             --output text >> inventory.txt
             cat inventory.txt
      
      #Add prometheus ip/hostname to ansible inventory
      - run:
          name: Add Prometheus ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo [prometheus] >> inventory.txt
            aws ec2 describe-instances \
             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
             --query "Reservations[*].Instances[*].PublicDnsName" \
             --output text >> inventory.txt
             cat inventory.txt
      
      - persist_to_workspace: 
          root: .
          paths:
            - .circleci/ansible/inventory.txt
       
      - destroy-environment
        
  #CONFIGURE INFRASTRUCTURE
  #configure backend and node exporter
  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["3d:67:c0:1d:82:32:71:ca:71:f6:7c:e7:e8:5b:20:12"]
      - attach_workspace: 
          at: .
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            pip3 install --upgrade pip
            pip3 install awscli
      - run: cat ./.circleci/ansible/inventory.txt
      
      #configure backend instance and install node-exporter
      - run:
          name: Run Playbook and configure Backend server 
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment
    
  #configure prometheus server and alertmanager
  configure-prometheus-server:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["13:de:3e:45:eb:c5:5a:7a:39:06:35:f0:21:0d:db:b0"]
      - attach_workspace: 
          at: .
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            pip3 install --upgrade pip
            pip3 install awscli
      - run: cat ./.circleci/ansible/inventory.txt
      
      #configure backend instance and install node-exporter
      - run:
          name: Run Playbook and configure Prometheus server 
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-prometheus.yml
            
      - destroy-environment  
  
  #MIGRATION
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migration_dump.txt
            cat migration_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully" migration_dump.txt
            then 
              curl https://kvdb.io/JpFWag6cMyoPuQ16GjNXxT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              curl https://kvdb.io/JpFWag6cMyoPuQ16GjNXxT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment
      - revert-migrations
  
  #DEPLOY FRONTEND-BACKEND
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/node:13.8.0
    steps:
      - checkout 
      - aws-cli/install #using orbs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm update
            npm audit fix
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${BACKEND_IP}
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo ENVIRONMENT=production  >> "frontend/.env" 
            echo NODE_ENV=production >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

      - destroy-environment
      - revert-migrations    
  
  deploy-backend:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: ["3d:67:c0:1d:82:32:71:ca:71:f6:7c:e7:e8:5b:20:12"]
      - attach_workspace: 
          at: .
      - run:
          name: Install Ansible and other dependencies
          command: |
            apk add --update nodejs npm curl
            apk add --update ansible
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: compress distribution files and deploy
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf backend.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      
      - destroy-environment
      - revert-migrations
  
  #SMOKE TEST
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm
            apk add unzip tar gzip curl
            pip3 install --upgrade pip
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend Smoke Test Success"
              exit 0
            else
              echo "Backend Smoke Test Failed"
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "${URL}" 
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend Smoke Test Success"
              exit 0
            else
              echo "Frontend Smoke Test Failed"
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  #PROMOTE TO PRODUCTION    
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Store old WorkflowID in  for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl https://kvdb.io/8Xwie2brfwFEQE8KZRtCDK/WorkflowID  -d $WorkflowID
            
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      
      - destroy-environment
      - revert-migrations

  #CLEANUP OLD DISTRIBUTION
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldWorkflowID=$(curl https://kvdb.io/8Xwie2brfwFEQE8KZRtCDK/WorkflowID)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo Old Workflow Id: ${OldWorkflowID}
            echo Current Workflow Id: ${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $CurrentWorkflowID != $OldWorkflowID ]]
            then
              echo $OldWorkflowID!=$CurrentWorkflowID => will delete old version
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-prometheus-${OldWorkflowID}
        
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
                        
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - configure-prometheus-server:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]